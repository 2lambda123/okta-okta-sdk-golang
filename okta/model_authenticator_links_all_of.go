/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
)

// AuthenticatorLinksAllOf struct for AuthenticatorLinksAllOf
type AuthenticatorLinksAllOf struct {
	Methods              *AuthenticatorLinksAllOfMethods `json:"methods,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AuthenticatorLinksAllOf AuthenticatorLinksAllOf

// NewAuthenticatorLinksAllOf instantiates a new AuthenticatorLinksAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthenticatorLinksAllOf() *AuthenticatorLinksAllOf {
	this := AuthenticatorLinksAllOf{}
	return &this
}

// NewAuthenticatorLinksAllOfWithDefaults instantiates a new AuthenticatorLinksAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthenticatorLinksAllOfWithDefaults() *AuthenticatorLinksAllOf {
	this := AuthenticatorLinksAllOf{}
	return &this
}

// GetMethods returns the Methods field value if set, zero value otherwise.
func (o *AuthenticatorLinksAllOf) GetMethods() AuthenticatorLinksAllOfMethods {
	if o == nil || o.Methods == nil {
		var ret AuthenticatorLinksAllOfMethods
		return ret
	}
	return *o.Methods
}

// GetMethodsOk returns a tuple with the Methods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticatorLinksAllOf) GetMethodsOk() (*AuthenticatorLinksAllOfMethods, bool) {
	if o == nil || o.Methods == nil {
		return nil, false
	}
	return o.Methods, true
}

// HasMethods returns a boolean if a field has been set.
func (o *AuthenticatorLinksAllOf) HasMethods() bool {
	if o != nil && o.Methods != nil {
		return true
	}

	return false
}

// SetMethods gets a reference to the given AuthenticatorLinksAllOfMethods and assigns it to the Methods field.
func (o *AuthenticatorLinksAllOf) SetMethods(v AuthenticatorLinksAllOfMethods) {
	o.Methods = &v
}

func (o AuthenticatorLinksAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Methods != nil {
		toSerialize["methods"] = o.Methods
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *AuthenticatorLinksAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varAuthenticatorLinksAllOf := _AuthenticatorLinksAllOf{}

	err = json.Unmarshal(bytes, &varAuthenticatorLinksAllOf)
	if err == nil {
		*o = AuthenticatorLinksAllOf(varAuthenticatorLinksAllOf)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &additionalProperties)
	if err == nil {
		delete(additionalProperties, "methods")
		o.AdditionalProperties = additionalProperties
	} else {
		return err
	}

	return err
}

type NullableAuthenticatorLinksAllOf struct {
	value *AuthenticatorLinksAllOf
	isSet bool
}

func (v NullableAuthenticatorLinksAllOf) Get() *AuthenticatorLinksAllOf {
	return v.value
}

func (v *NullableAuthenticatorLinksAllOf) Set(val *AuthenticatorLinksAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticatorLinksAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticatorLinksAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticatorLinksAllOf(val *AuthenticatorLinksAllOf) *NullableAuthenticatorLinksAllOf {
	return &NullableAuthenticatorLinksAllOf{value: val, isSet: true}
}

func (v NullableAuthenticatorLinksAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticatorLinksAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
