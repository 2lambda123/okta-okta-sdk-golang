/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
)

// OAuth2ScopeConsentGrantLinksAllOf struct for OAuth2ScopeConsentGrantLinksAllOf
type OAuth2ScopeConsentGrantLinksAllOf struct {
	App                  *OAuth2ScopeConsentGrantLinksAllOfApp    `json:"app,omitempty"`
	Client               *OAuth2ScopeConsentGrantLinksAllOfClient `json:"client,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OAuth2ScopeConsentGrantLinksAllOf OAuth2ScopeConsentGrantLinksAllOf

// NewOAuth2ScopeConsentGrantLinksAllOf instantiates a new OAuth2ScopeConsentGrantLinksAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOAuth2ScopeConsentGrantLinksAllOf() *OAuth2ScopeConsentGrantLinksAllOf {
	this := OAuth2ScopeConsentGrantLinksAllOf{}
	return &this
}

// NewOAuth2ScopeConsentGrantLinksAllOfWithDefaults instantiates a new OAuth2ScopeConsentGrantLinksAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOAuth2ScopeConsentGrantLinksAllOfWithDefaults() *OAuth2ScopeConsentGrantLinksAllOf {
	this := OAuth2ScopeConsentGrantLinksAllOf{}
	return &this
}

// GetApp returns the App field value if set, zero value otherwise.
func (o *OAuth2ScopeConsentGrantLinksAllOf) GetApp() OAuth2ScopeConsentGrantLinksAllOfApp {
	if o == nil || o.App == nil {
		var ret OAuth2ScopeConsentGrantLinksAllOfApp
		return ret
	}
	return *o.App
}

// GetAppOk returns a tuple with the App field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth2ScopeConsentGrantLinksAllOf) GetAppOk() (*OAuth2ScopeConsentGrantLinksAllOfApp, bool) {
	if o == nil || o.App == nil {
		return nil, false
	}
	return o.App, true
}

// HasApp returns a boolean if a field has been set.
func (o *OAuth2ScopeConsentGrantLinksAllOf) HasApp() bool {
	if o != nil && o.App != nil {
		return true
	}

	return false
}

// SetApp gets a reference to the given OAuth2ScopeConsentGrantLinksAllOfApp and assigns it to the App field.
func (o *OAuth2ScopeConsentGrantLinksAllOf) SetApp(v OAuth2ScopeConsentGrantLinksAllOfApp) {
	o.App = &v
}

// GetClient returns the Client field value if set, zero value otherwise.
func (o *OAuth2ScopeConsentGrantLinksAllOf) GetClient() OAuth2ScopeConsentGrantLinksAllOfClient {
	if o == nil || o.Client == nil {
		var ret OAuth2ScopeConsentGrantLinksAllOfClient
		return ret
	}
	return *o.Client
}

// GetClientOk returns a tuple with the Client field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth2ScopeConsentGrantLinksAllOf) GetClientOk() (*OAuth2ScopeConsentGrantLinksAllOfClient, bool) {
	if o == nil || o.Client == nil {
		return nil, false
	}
	return o.Client, true
}

// HasClient returns a boolean if a field has been set.
func (o *OAuth2ScopeConsentGrantLinksAllOf) HasClient() bool {
	if o != nil && o.Client != nil {
		return true
	}

	return false
}

// SetClient gets a reference to the given OAuth2ScopeConsentGrantLinksAllOfClient and assigns it to the Client field.
func (o *OAuth2ScopeConsentGrantLinksAllOf) SetClient(v OAuth2ScopeConsentGrantLinksAllOfClient) {
	o.Client = &v
}

func (o OAuth2ScopeConsentGrantLinksAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.App != nil {
		toSerialize["app"] = o.App
	}
	if o.Client != nil {
		toSerialize["client"] = o.Client
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *OAuth2ScopeConsentGrantLinksAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varOAuth2ScopeConsentGrantLinksAllOf := _OAuth2ScopeConsentGrantLinksAllOf{}

	err = json.Unmarshal(bytes, &varOAuth2ScopeConsentGrantLinksAllOf)
	if err == nil {
		*o = OAuth2ScopeConsentGrantLinksAllOf(varOAuth2ScopeConsentGrantLinksAllOf)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &additionalProperties)
	if err == nil {
		delete(additionalProperties, "app")
		delete(additionalProperties, "client")
		o.AdditionalProperties = additionalProperties
	} else {
		return err
	}

	return err
}

type NullableOAuth2ScopeConsentGrantLinksAllOf struct {
	value *OAuth2ScopeConsentGrantLinksAllOf
	isSet bool
}

func (v NullableOAuth2ScopeConsentGrantLinksAllOf) Get() *OAuth2ScopeConsentGrantLinksAllOf {
	return v.value
}

func (v *NullableOAuth2ScopeConsentGrantLinksAllOf) Set(val *OAuth2ScopeConsentGrantLinksAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuth2ScopeConsentGrantLinksAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuth2ScopeConsentGrantLinksAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuth2ScopeConsentGrantLinksAllOf(val *OAuth2ScopeConsentGrantLinksAllOf) *NullableOAuth2ScopeConsentGrantLinksAllOf {
	return &NullableOAuth2ScopeConsentGrantLinksAllOf{value: val, isSet: true}
}

func (v NullableOAuth2ScopeConsentGrantLinksAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuth2ScopeConsentGrantLinksAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
