/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
)

// FeatureLinksAllOf struct for FeatureLinksAllOf
type FeatureLinksAllOf struct {
	Dependents           *FeatureLinksAllOfDependents   `json:"dependents,omitempty"`
	Dependencies         *FeatureLinksAllOfDependencies `json:"dependencies,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FeatureLinksAllOf FeatureLinksAllOf

// NewFeatureLinksAllOf instantiates a new FeatureLinksAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeatureLinksAllOf() *FeatureLinksAllOf {
	this := FeatureLinksAllOf{}
	return &this
}

// NewFeatureLinksAllOfWithDefaults instantiates a new FeatureLinksAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeatureLinksAllOfWithDefaults() *FeatureLinksAllOf {
	this := FeatureLinksAllOf{}
	return &this
}

// GetDependents returns the Dependents field value if set, zero value otherwise.
func (o *FeatureLinksAllOf) GetDependents() FeatureLinksAllOfDependents {
	if o == nil || o.Dependents == nil {
		var ret FeatureLinksAllOfDependents
		return ret
	}
	return *o.Dependents
}

// GetDependentsOk returns a tuple with the Dependents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureLinksAllOf) GetDependentsOk() (*FeatureLinksAllOfDependents, bool) {
	if o == nil || o.Dependents == nil {
		return nil, false
	}
	return o.Dependents, true
}

// HasDependents returns a boolean if a field has been set.
func (o *FeatureLinksAllOf) HasDependents() bool {
	if o != nil && o.Dependents != nil {
		return true
	}

	return false
}

// SetDependents gets a reference to the given FeatureLinksAllOfDependents and assigns it to the Dependents field.
func (o *FeatureLinksAllOf) SetDependents(v FeatureLinksAllOfDependents) {
	o.Dependents = &v
}

// GetDependencies returns the Dependencies field value if set, zero value otherwise.
func (o *FeatureLinksAllOf) GetDependencies() FeatureLinksAllOfDependencies {
	if o == nil || o.Dependencies == nil {
		var ret FeatureLinksAllOfDependencies
		return ret
	}
	return *o.Dependencies
}

// GetDependenciesOk returns a tuple with the Dependencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureLinksAllOf) GetDependenciesOk() (*FeatureLinksAllOfDependencies, bool) {
	if o == nil || o.Dependencies == nil {
		return nil, false
	}
	return o.Dependencies, true
}

// HasDependencies returns a boolean if a field has been set.
func (o *FeatureLinksAllOf) HasDependencies() bool {
	if o != nil && o.Dependencies != nil {
		return true
	}

	return false
}

// SetDependencies gets a reference to the given FeatureLinksAllOfDependencies and assigns it to the Dependencies field.
func (o *FeatureLinksAllOf) SetDependencies(v FeatureLinksAllOfDependencies) {
	o.Dependencies = &v
}

func (o FeatureLinksAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Dependents != nil {
		toSerialize["dependents"] = o.Dependents
	}
	if o.Dependencies != nil {
		toSerialize["dependencies"] = o.Dependencies
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *FeatureLinksAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varFeatureLinksAllOf := _FeatureLinksAllOf{}

	err = json.Unmarshal(bytes, &varFeatureLinksAllOf)
	if err == nil {
		*o = FeatureLinksAllOf(varFeatureLinksAllOf)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &additionalProperties)
	if err == nil {
		delete(additionalProperties, "dependents")
		delete(additionalProperties, "dependencies")
		o.AdditionalProperties = additionalProperties
	} else {
		return err
	}

	return err
}

type NullableFeatureLinksAllOf struct {
	value *FeatureLinksAllOf
	isSet bool
}

func (v NullableFeatureLinksAllOf) Get() *FeatureLinksAllOf {
	return v.value
}

func (v *NullableFeatureLinksAllOf) Set(val *FeatureLinksAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureLinksAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureLinksAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureLinksAllOf(val *FeatureLinksAllOf) *NullableFeatureLinksAllOf {
	return &NullableFeatureLinksAllOf{value: val, isSet: true}
}

func (v NullableFeatureLinksAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureLinksAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
