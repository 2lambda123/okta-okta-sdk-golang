/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
)

// ZscalerbyzApplicationSettingsAllOf struct for ZscalerbyzApplicationSettingsAllOf
type ZscalerbyzApplicationSettingsAllOf struct {
	App                  ZscalerbyzApplicationSettingsApplication `json:"app"`
	AdditionalProperties map[string]interface{}
}

type _ZscalerbyzApplicationSettingsAllOf ZscalerbyzApplicationSettingsAllOf

// NewZscalerbyzApplicationSettingsAllOf instantiates a new ZscalerbyzApplicationSettingsAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZscalerbyzApplicationSettingsAllOf(app ZscalerbyzApplicationSettingsApplication) *ZscalerbyzApplicationSettingsAllOf {
	this := ZscalerbyzApplicationSettingsAllOf{}
	this.App = app
	return &this
}

// NewZscalerbyzApplicationSettingsAllOfWithDefaults instantiates a new ZscalerbyzApplicationSettingsAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZscalerbyzApplicationSettingsAllOfWithDefaults() *ZscalerbyzApplicationSettingsAllOf {
	this := ZscalerbyzApplicationSettingsAllOf{}
	return &this
}

// GetApp returns the App field value
func (o *ZscalerbyzApplicationSettingsAllOf) GetApp() ZscalerbyzApplicationSettingsApplication {
	if o == nil {
		var ret ZscalerbyzApplicationSettingsApplication
		return ret
	}

	return o.App
}

// GetAppOk returns a tuple with the App field value
// and a boolean to check if the value has been set.
func (o *ZscalerbyzApplicationSettingsAllOf) GetAppOk() (*ZscalerbyzApplicationSettingsApplication, bool) {
	if o == nil {
		return nil, false
	}
	return &o.App, true
}

// SetApp sets field value
func (o *ZscalerbyzApplicationSettingsAllOf) SetApp(v ZscalerbyzApplicationSettingsApplication) {
	o.App = v
}

func (o ZscalerbyzApplicationSettingsAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["app"] = o.App
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ZscalerbyzApplicationSettingsAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varZscalerbyzApplicationSettingsAllOf := _ZscalerbyzApplicationSettingsAllOf{}

	err = json.Unmarshal(bytes, &varZscalerbyzApplicationSettingsAllOf)
	if err == nil {
		*o = ZscalerbyzApplicationSettingsAllOf(varZscalerbyzApplicationSettingsAllOf)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &additionalProperties)
	if err == nil {
		delete(additionalProperties, "app")
		o.AdditionalProperties = additionalProperties
	} else {
		return err
	}

	return err
}

type NullableZscalerbyzApplicationSettingsAllOf struct {
	value *ZscalerbyzApplicationSettingsAllOf
	isSet bool
}

func (v NullableZscalerbyzApplicationSettingsAllOf) Get() *ZscalerbyzApplicationSettingsAllOf {
	return v.value
}

func (v *NullableZscalerbyzApplicationSettingsAllOf) Set(val *ZscalerbyzApplicationSettingsAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableZscalerbyzApplicationSettingsAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableZscalerbyzApplicationSettingsAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZscalerbyzApplicationSettingsAllOf(val *ZscalerbyzApplicationSettingsAllOf) *NullableZscalerbyzApplicationSettingsAllOf {
	return &NullableZscalerbyzApplicationSettingsAllOf{value: val, isSet: true}
}

func (v NullableZscalerbyzApplicationSettingsAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZscalerbyzApplicationSettingsAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
